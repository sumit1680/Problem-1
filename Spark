//Using sqoop, import orders table into hdfs to folders /user/sumitsinha1680/problem1/orders. 
File should be loaded as Avro File and use snappy compression

sqoop import /
--connect "jdbc:mysql://ms.itversity.com/retail_db" \
--username retail_user \
--password itversity \
--table orders \
--target-dir /user/sumitsinha1680/problem1/orders \
--compress \
--compression-codec Snappy \
--as-avrodatafile

//Using sqoop, import order_items  table into hdfs to folders /user/sumitsinha1680/problem1/order-items. 
Files should be loaded as avro file and use snappy compression

sqoop import /
--connect "jdbc:mysql://ms.itversity.com/retail_db" \
--username retail_user \
--password itversity \
--table order-items \
--compress \
--compression-codec Snappy \
--target-dir /user/sumitsinha1680/problem1/order-items \
--as-avrodatafile

//Using Spark Scala load data at /user/cloudera/problem1/orders and /user/cloudera/problem1/orders-items items as dataframes

spark-shell --packages com.databricks:spark-avro_2.11:4.0.0
import com.databricks.spark.avro._;
   var ordersDF = sqlContext.read.avro("/user/sumitsinha1680/problem1/orders");
   var orderItemDF = sqlContext.read.avro("/user/sumitsinha1680/problem1/order-items");
   
//Expected Intermediate Result: Order_Date , Order_status, total_orders, total_amount. 
In plain english, please find total orders and total amount per status per day. 
The result should be sorted by order date in descending, order status in ascending and total amount in descending 
and total orders in ascending. 
Aggregation should be done using below methods. However, sorting can be done using a dataframe or RDD. 
Perform aggregation in each of the following ways
a). Just by using Data Frames API - here order_date should be YYYY-MM-DD format
b). Using Spark SQL  - here order_date should be YYYY-MM-DD format
c). By using combineByKey function on RDDS -- No need of formatting order_date or total_amount

var joinedDF = ordersDF
.join(orderItemDF,ordersDF("order_id")===orderItemDF("order_item_order_id"))

4a) var dataframeResult = joinedDF.groupBy(to_date(from_unixtime(col("order_date")/1000)).alias("order_date_formatted"),col("order_status")).
agg(round(sum(col("order_item_subtotal")),2).alias("total_amount"),countDistinct(col("order_id")).alias("total_orders").
orderBy(col("order_date_formatted").desc,col("order_status"),col("total_amount").desc,col("total_orders"))






